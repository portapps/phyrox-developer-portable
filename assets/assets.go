// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/FirefoxDeveloperEdition.lnk (1.294kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _firefoxdevelopereditionLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x5f\x68\x23\x55\x14\xc6\x7f\x71\xbb\xae\x75\x5f\x1a\x5c\xc4\x2d\x5d\x3a\x0f\x22\x5d\x35\xd9\x49\x9a\xa4\x49\xd6\x95\xa6\x49\xc6\x68\xe2\x36\xb4\x2a\x45\xe6\xc1\xd6\xdc\xb4\xa3\x49\x27\x9d\xd4\x92\x42\x29\x0a\x42\xb1\xa8\x88\x0a\x56\x44\x1a\x8b\xd2\x0a\xb5\xe0\x1f\x10\x69\x91\x82\xf8\xe2\x83\x04\x69\x41\x14\x6a\x2b\xfa\xa0\x20\xc5\xfa\xa4\x16\x2a\x77\x32\x91\xa6\x2a\x8a\xb0\xe7\xe1\x9c\xe4\x9c\x73\xe7\xfb\xee\x77\xcf\xc9\x00\xae\x73\xd7\x21\x6d\xd3\xf6\x68\xaf\x01\x0a\xb0\xb7\xf4\x61\xe1\xee\xed\x2d\xd7\x77\x3f\xd7\xe3\x95\xa3\x4c\xf1\xe5\x2f\xb6\x5c\xb5\x0b\x67\xec\x46\x17\xcd\xf6\x96\xeb\x1c\x9d\xd9\xdd\xfe\x9a\xf2\x63\xd4\x68\x5b\xfa\xf2\x06\xee\x50\xd5\xd7\xcf\x73\x29\x1e\xd5\xf9\xab\x2d\xe0\xb3\xe3\xe8\xd5\xc7\x36\xdc\x64\x07\xfa\xef\x19\x88\xcd\xfa\xe1\x49\x5a\x69\x61\xff\xe3\x4b\xf7\x47\xef\x92\x35\x2f\xd0\x79\x7d\x33\xe0\x43\xb6\x4f\xbf\xd1\x4a\x16\x0b\x93\x51\x2c\x86\x29\xa2\xa0\x61\x50\x40\x50\x46\xa1\x8b\x0a\x61\x42\x5c\x04\x7a\x29\x33\x86\xa0\x40\x81\x6e\xfc\x78\xc9\xd9\xbf\xef\xc4\x83\x1f\x1f\x61\x7c\xf4\x00\xb7\x30\x73\x8c\x57\x1b\xda\xbd\x03\x49\xad\x7f\xd6\x07\x39\x87\x97\xcc\x37\x78\xb9\xdf\x97\x9c\xce\x9e\xb8\xd9\xf2\xe5\xac\xcd\xc3\x42\x90\xc7\xa4\x82\x42\x02\xc1\x94\x8d\x6f\x52\x42\x60\xa1\x90\x24\x87\xc1\x24\x06\x26\xe3\x36\xf6\x08\x7e\xa4\xbc\xb9\xab\xab\x13\x0a\x79\xc3\x12\x79\xb3\xe2\x15\x15\x41\xea\x6f\xd0\x6b\x1f\x48\xf4\xd6\x13\xe8\x9f\xb4\x3f\x4d\xbe\x09\xdd\x8b\xa0\x82\x00\xda\x81\x32\xd0\xe1\xa8\x29\x63\xd0\x39\x67\x01\xe7\x81\x53\x40\x7c\xbd\x43\x6f\x03\x12\xc6\xad\x13\x4f\x08\x25\x4e\x3c\xaa\x67\x2d\x73\xd4\x1a\x2e\x2a\x9a\x51\x10\x65\xa5\xab\x12\x0e\x5d\xd4\xb5\x3a\x43\x25\x21\xa6\x44\xc1\x2c\x09\x4b\x49\xe6\x8c\x49\xc3\x1c\xd7\x8f\x73\xa7\x0f\x2f\x5e\xf4\x26\xff\xdf\x1e\x4e\xff\x1f\x42\xea\xff\x70\x7d\x95\x38\xd1\x6b\x8a\x2c\x25\x3b\x0d\xd5\xdb\x81\x4f\x1d\x79\xcf\x42\x75\xbf\xf7\xe1\x99\xdf\xab\x87\xe9\xb9\xfb\x36\x0f\x76\x3f\xfa\xed\x79\x59\x7b\xa4\x2e\x75\x75\xc8\x91\xbf\xf4\xa8\x67\x6c\x38\x27\xca\x8d\x67\xcc\xad\xad\x4d\x4e\x1f\xac\x26\x5f\x7c\xea\xfb\xb7\xbf\x5a\x99\x6b\xf1\xbf\x70\x79\xa7\x23\xf6\x83\xfb\xd5\xc7\x1f\x78\xef\xd4\x8d\xf3\x99\x7f\xab\xab\x2e\x7b\x34\xaa\xcf\x00\xbe\xc1\xec\xe0\xb7\xf3\x43\xda\x46\x26\x1c\x5f\x3f\xbc\xe9\xa5\xdb\x16\x8a\x9f\x17\x81\x16\x09\xd4\x09\xc8\x69\x1a\xc4\x83\x0f\x0f\x41\x67\x23\x3c\x74\xd3\x43\x84\x00\x01\x22\x44\x08\xd9\xc2\xc8\x5a\x84\x20\x2a\x01\xfb\xbf\x9f\xb0\xdd\x19\x24\x80\x8a\x6a\x6f\x91\x3c\x11\xb2\xbf\x56\xcf\xd4\x6d\xc4\x21\xf2\x60\x57\x66\x71\x7a\x31\x92\x5e\xa9\xed\x6d\x79\xf6\xb6\x7f\x71\x37\x36\x48\xba\xa3\xa3\xfa\x40\x9e\x6e\x30\x93\x55\x0d\x8d\x04\x01\x92\x24\xe8\x23\x44\x1f\x31\x62\xf4\xd8\xb9\x38\xdd\x7f\x4e\x7e\xc4\x41\x78\xf7\xe6\x62\xe2\x9d\xe7\x4a\xa9\xe5\x54\xaf\xf7\xcd\x2b\x95\x67\x2f\x00\x63\xb2\x21\x05\x7c\xb3\xd3\xfe\xd3\xdc\xaf\xfb\xa9\x57\xd6\xbe\x4e\x9f\xf9\x6c\x56\x3d\xbe\x3a\x7f\x04\x00\x00\xff\xff\xb2\xca\x3f\x21\x0e\x05\x00\x00")

func firefoxdevelopereditionLnkBytes() ([]byte, error) {
	return bindataRead(
		_firefoxdevelopereditionLnk,
		"FirefoxDeveloperEdition.lnk",
	)
}

func firefoxdevelopereditionLnk() (*asset, error) {
	bytes, err := firefoxdevelopereditionLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FirefoxDeveloperEdition.lnk", size: 1294, mode: os.FileMode(0666), modTime: time.Unix(1572378781, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0x64, 0x23, 0x53, 0x23, 0x7a, 0x80, 0x9d, 0xb4, 0x38, 0x88, 0x8e, 0x8e, 0xb2, 0xd2, 0xad, 0x74, 0x67, 0xbc, 0x64, 0x79, 0x2b, 0x22, 0x77, 0x32, 0xe2, 0xef, 0x5f, 0x13, 0x74, 0xac, 0x70}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"FirefoxDeveloperEdition.lnk": firefoxdevelopereditionLnk,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"FirefoxDeveloperEdition.lnk": {firefoxdevelopereditionLnk, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
